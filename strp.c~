#include <assert.h>
#include <stddef.h>
#include "str.h"

size_t Str_getLength(const char *str) {
    assert(str != NULL);
    const char *ptr = str;
    while (*ptr != '\0') {
        ptr++;
    }
    return (size_t)(ptr - str);
}

char *Str_copy(char *dest, const char *src) {
    assert(dest != NULL);
    assert(src != NULL);
    char *dest_start = dest;
    while ((*dest++ = *src++) != '\0') {}
    return dest_start;
}

char *Str_concat(char *dest, const char *src) {
    assert(dest != NULL);
    assert(src != NULL);
    char *dest_start = dest;
    while (*dest != '\0') {
        dest++;
    }
    while ((*dest++ = *src++) != '\0') {}
    return dest_start;
}

int Str_compare(const char *str1, const char *str2) {
    assert(str1 != NULL);
    assert(str2 != NULL);
    while (*str1 == *str2) {
        if (*str1 == '\0') {
            return 0; // strings are equal
        }
        str1++;
        str2++;
    }
    return *str1 - *str2;
}

const char *Str_search(const char *haystack, const char *needle) {
    assert(haystack != NULL);
    assert(needle != NULL);
    size_t needle_len = Str_getLength(needle);
    if (needle_len == 0) {
        return haystack; // an empty string is always found
    }
    while (*haystack != '\0') {
        const char *haystack_ptr = haystack;
        const char *needle_ptr = needle;
        while (*haystack_ptr == *needle_ptr) {
            if (*(needle_ptr + 1) == '\0') {
                return haystack; // needle found in haystack
            }
            haystack_ptr++;
            needle_ptr++;
        }
        haystack++;
    }
    return NULL; // needle not found
}
